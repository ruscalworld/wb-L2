package pattern

import "fmt"

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

/*
Паттерн подразумевает возможность выбирать различное поведение в зависимости от контекста прямо во время выполнения
программы. Это самое поведение реализуется с помощью т.н. стратегий.

Преимущества - сокрытие конкретных алгоритмов и, как следствие, независимость от них; более аккуратный код по сравнению
с аналогичным, написанным с использованием конструкций if-else и switch.

Пример - любая ситуация, в которой некоторый алгоритм может выполняться по-разному в зависимости от контекста. Его
части, выполнение которых зависит от контекста, выносятся в отдельные структуры, называемые стратегиями.
*/

// Actor выполняет некоторое действие в зависимости от заданной стратегии.
type Actor struct {
	Strategy Strategy
}

func (a *Actor) DoSomething() {
	a.Strategy.PerformSomeAction()
}

// Strategy описывает действия, которые должны выполняться стратегией.
type Strategy interface {
	PerformSomeAction()
}

type Strategy1 struct{}

func (s *Strategy1) PerformSomeAction() {
	fmt.Println("meow")
}

type Strategy2 struct{}

func (s *Strategy2) PerformSomeAction() {
	fmt.Println("hello")
}
